local function run(msg, matches, callback, extra)local data = load_data(_config.moderation.data)local group_welcome = data[tostring(msg.to.id)]['group_welcome']-------------------------- Data Will be save on Moderetion.json    if matches[1]:lower() == 'delwlc' and not matches[2] and is_owner(msg) then        data[tostring(msg.to.id)]['group_welcome'] = nil --delete welcome        save_data(_config.moderation.data, data)                return 'Group welcome Deleted!'endif not is_owner(msg) then     return 'For Owners Only!'end--------------------Loading Group Ruleslocal rules = data[tostring(msg.to.id)]['rules']    if matches[1]:lower() == 'rules' and matches[2] and is_owner(msg) then    if data[tostring(msg.to.id)]['rules'] == nil then --when no rules found....        return 'No Rules Found!\n\nSet Rule first by /set rules [rules]\nOr\nset normal welcome by /setwlc [wlc msg]'enddata[tostring(msg.to.id)]['group_welcome'] = matches[2]..'\n\nGroup Rules :\n'..rules        save_data(_config.moderation.data, data)                return 'Group welcome Seted To :\n'..matches[2]endif not is_owner(msg) then     return 'For Owners Only!'endif matches[1] and is_owner(msg) then    data[tostring(msg.to.id)]['group_welcome'] = matches[1]        save_data(_config.moderation.data, data)                return 'Group welcome Seted To : \n'..matches[1]endif not is_owner(msg) then     return 'For Owners Only!'end    endreturn {  patterns = {  "^[!/]setwlc (rules) +(.*)$",  "^[!/]setwlc +(.*)$",  "^[!/](delwlc)$"  },  run = run}
